{"version":3,"sources":["hooks.ts","Wave.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomRange","range","Math","random","waveRandomParams","am","tp","PI","generateWaveParams","Wave","index","width","startLine","height","waveCount","useState","line","setLine","lineRef","useRef","current","waveParams","setWaveParams","useEffect","setInterval","nextLine","performance","now","fill","x","y","sceneFunc","context","shape","beginPath","moveTo","map","deg","speed","sin","reduce","a","b","lineTo","fillStrokeShape","App","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","Array","_","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KA4BO,I,OCnBDA,EAAc,SAACC,GAAD,OAA4BA,EAAQ,EAAIA,EAAQC,KAAKC,UAEnEC,EAAmB,SAACC,EAAYC,GACpC,MAAO,CAACD,EAAKL,EAAYK,EAAK,GAAIC,EAAKN,EAAYM,EAAK,GAAIN,EAAYE,KAAKK,IAAKP,EAAY,OAG1FQ,EAAqB,WACzB,MAAO,CAACJ,EAAiB,GAAI,KAAMA,EAAiB,GAAI,KAAMA,EAAiB,GAAI,OAgDtEK,MA7Cf,YAAwC,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,MACfC,EAAaC,EAASH,EAASI,EACrC,EAAwBC,mBAASH,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACMC,EAAUC,iBAAOH,GACvBE,EAAQE,QAAUJ,EAClB,MAAoCD,mBAA6CP,KAAjF,mBAAOa,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,aAAY,WACV,IAAMC,GAAYb,EAAYc,YAAYC,MAAQ,IAAMd,EACpDY,EAAWP,EAAQE,SAASE,EAAcd,KAC9CS,EAAQQ,KACP,MAEF,IAEH,IACMG,EAAI,yBADM,EAAIZ,EAAOH,EACjB,KAEV,OACE,cAAC,IAAD,CACEgB,EAAG,EACHC,EAAG,EACHnB,MAAOA,EACPE,OAAQA,EACRe,KAAMA,EACNG,UAAW,SAACC,EAASC,GACnBD,EAAQE,YACRF,EAAQG,OAAO,EAAGnB,GAElB,IAJ6B,eAIpBa,GACP,IAAMC,EAAIT,EACPe,KAAI,mCAAE/B,EAAF,KAAMC,EAAN,KAAU+B,EAAV,KAAeC,EAAf,YAA0BjC,EAAKH,KAAKqC,IAAKrC,KAAKK,GAAKD,GAAO+B,EAAMR,GAAKb,EAAOsB,MAChFE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACxBV,EAAQW,OAAOd,EAAGC,EAAId,IAJfa,EAAI,EAAGA,GAAKlB,EAAOkB,IAAM,EAAzBA,GAOTG,EAAQW,OAAOhC,EAAO,GACtBqB,EAAQW,OAAO,EAAG,GAClBX,EAAQY,gBAAgBX,OCrDnBpB,EAAS,IACTC,EAAY,EAgBV+B,MAdf,WACE,IAAQlC,EFPH,WAGL,MAAoCI,mBAAS,CAC3CJ,MAAO,EACPE,OAAQ,IAFV,mBAAOiC,EAAP,KAAmBC,EAAnB,KAoBA,OAhBAxB,qBAAU,WAER,SAASyB,IAEPD,EAAc,CACZpC,MAAOsC,OAAOC,WACdrC,OAAQoC,OAAOE,cAQnB,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIF,EEhBWQ,GAAV3C,MACR,OACE,cAAC,IAAD,CAAOA,MAAOA,EAAOE,OAAQA,EAA7B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMF,MAAOA,EAAOE,OAAQA,EAAQe,KAAK,SACxC,YAAI2B,MAAMzC,IAAYsB,KAAI,SAACoB,EAAGC,GAAJ,OACzB,cAAC,EAAD,CAAc/C,MAAO+C,EAAG9C,MAAOA,GAApB8C,YCDNC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a787fae2.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const useRefCallback = <T>() => {\n  const ref = useRef<T | null>(null);\n  const setRef = useCallback((node: T) => {\n    ref.current = node;\n  }, []);\n\n  return {\n    ref,\n    setRef,\n  };\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Shape } from \"react-konva\";\nimport { height, waveCount } from \"./App\";\n\ntype Props = {\n  index: number;\n  width: number;\n};\n\nconst randomRange = (range: number): number => -range + 2 * range * Math.random();\n\nconst waveRandomParams = (am: number, tp: number): [number, number, number, number] => {\n  return [am + randomRange(am / 4), tp + randomRange(tp / 4), randomRange(Math.PI), randomRange(0.02)];\n};\n\nconst generateWaveParams = (): [number, number, number, number][] => {\n  return [waveRandomParams(25, 600), waveRandomParams(15, 400), waveRandomParams(10, 200)];\n};\n\nfunction Wave({ index, width }: Props) {\n  const startLine = (height * index) / waveCount;\n  const [line, setLine] = useState(startLine);\n  const lineRef = useRef(line);\n  lineRef.current = line;\n  const [waveParams, setWaveParams] = useState<[number, number, number, number][]>(generateWaveParams());\n\n  useEffect(() => {\n    setInterval(() => {\n      const nextLine = (startLine + performance.now() / 10) % height;\n      if (nextLine < lineRef.current) setWaveParams(generateWaveParams());\n      setLine(nextLine);\n    }, 20);\n    // eslint-disable-next-line\n  }, []);\n\n  const opacity = 1 - line / height;\n  const fill = `rgba(0,191,255,${opacity})`;\n\n  return (\n    <Shape\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={fill}\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(0, line);\n\n        for (let x = 0; x <= width; x++) {\n          const y = waveParams\n            .map(([am, tp, deg, speed]) => am * Math.sin((Math.PI / tp) * (deg + x) + line * speed))\n            .reduce((a, b) => a + b);\n          context.lineTo(x, y + line);\n        }\n\n        context.lineTo(width, 0);\n        context.lineTo(0, 0);\n        context.fillStrokeShape(shape);\n      }}\n    />\n  );\n}\n\nexport default Wave;\n","import React from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { useWindowSize } from \"./hooks\";\nimport Wave from \"./Wave\";\n\nexport const height = 1000;\nexport const waveCount = 4;\n\nfunction App() {\n  const { width } = useWindowSize();\n  return (\n    <Stage width={width} height={height}>\n      <Layer>\n        <Rect width={width} height={height} fill=\"#ccc\" />\n        {[...Array(waveCount)].map((_, i) => (\n          <Wave key={i} index={i} width={width} />\n        ))}\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}