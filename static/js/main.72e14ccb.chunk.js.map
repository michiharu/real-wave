{"version":3,"sources":["hooks.ts","Wave.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wave","width","height","points","tailPoints","fill","x","y","sceneFunc","context","shape","beginPath","moveTo","forEach","lineTo","reverse","fillStrokeShape","whiteRate","disappearRate","randomRange","range","Math","random","waveRandomParams","am","tp","PI","generateWaveParams","bottomPoints","Array","map","calcColor","a","b","rate","ceil","calcRGB","wave1","wave2","wave3","wave4","calcFill","line","endLine","r","g","opacity","App","useState","window","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","performance","now","times","setTimes","_","i","params","initialWavesState","wavesState","setWavesState","setInterval","state","elapsed","needSwap","waves","w","length","slice","wavePoints","slowDownLine","maxRemain","remain","deg","speed","sin","reduce","cos","calcPoints","props","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72e14ccb.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const useRefCallback = <T>() => {\n  const ref = useRef<T | null>(null);\n  const setRef = useCallback((node: T) => {\n    ref.current = node;\n  }, []);\n\n  return {\n    ref,\n    setRef,\n  };\n};\n","import React from \"react\";\nimport { Shape } from \"react-konva\";\n\nexport type WaveParams = [number, number, number, number];\n\nexport type WaveProps = {\n  width: number;\n  height: number;\n  points: number[];\n  tailPoints: number[];\n  fill: string;\n};\n\nfunction Wave({ width, height, points, tailPoints, fill }: WaveProps) {\n  return (\n    <Shape\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={fill}\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(0, tailPoints[0]);\n        tailPoints.forEach((y, x) => context.lineTo(x, y));\n        points.reverse().forEach((y, x) => context.lineTo(width - x, y));\n        context.fillStrokeShape(shape);\n      }}\n    />\n  );\n}\n\nexport default Wave;\n","import React, { useEffect, useState } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { useWindowSize } from \"./hooks\";\nimport Wave, { WaveParams, WaveProps } from \"./Wave\";\n\nconst waveCount = 6;\nconst whiteRate = 0.7;\nconst disappearRate = 0.76;\nconst slowDownRate = 0.6;\n\nconst randomRange = (range: number): number => -range + 2 * range * Math.random();\n\nconst waveRandomParams = (am: number, tp: number): WaveParams => {\n  return [am + randomRange(am / 4), tp + randomRange(tp / 4), randomRange(Math.PI), randomRange(0.01)];\n};\n\nconst generateWaveParams = (): WaveParams[] => {\n  return [waveRandomParams(30, 800), waveRandomParams(25, 500), waveRandomParams(15, 180)];\n};\n\nconst calcPoints = (width: number, line: number, endLine: number, params: WaveParams[]): number[] => {\n  const slowDownLine = endLine * slowDownRate;\n  const maxRemain = endLine - slowDownLine;\n  const remain = line - slowDownLine;\n  return [...Array(width + 1)].map((_, x) => {\n    const y = params\n      .map(([am, tp, deg, speed]) => am * Math.sin((Math.PI / tp) * (deg + x) + line * speed))\n      .reduce((a, b) => a + b);\n    if (remain < 0) return y + line - 50;\n    return y + slowDownLine + remain * Math.cos((Math.PI * remain * 0.4) / maxRemain) - 50;\n  });\n};\n\nconst bottomPoints = (width: number): number[] => [...Array(width + 1)].map(() => 0);\n\nconst calcColor = (a: number, b: number, rate: number): number => {\n  return Math.ceil(a + (b - a) * rate);\n};\n\nconst calcRGB = (a: RGB, b: RGB, rate: number): RGB => {\n  return [calcColor(a[0], b[0], rate), calcColor(a[1], b[1], rate), calcColor(a[2], b[2], rate)];\n};\n\ntype RGB = [number, number, number];\nconst wave1: RGB = [0, 96, 161];\nconst wave2: RGB = [102, 244, 255];\nconst wave3: RGB = [200, 250, 255];\nconst wave4: RGB = [132, 132, 132];\n\nconst calcFill = (line: number, endLine: number): string => {\n  const rate = line / endLine;\n  if (rate < whiteRate) {\n    const [r, g, b] = calcRGB(wave1, wave2, rate / whiteRate);\n    return `rgba(${r},${g},${b},1)`;\n  }\n  if (rate < disappearRate) {\n    const [r, g, b] = calcRGB(wave2, wave3, (rate - whiteRate) / (disappearRate - whiteRate));\n    return `rgba(${r},${g},${b},1)`;\n  }\n  const [r, g, b] = calcRGB(wave3, wave4, (rate - disappearRate) / (1 - disappearRate));\n  const opacity = rate < disappearRate ? 1 : (1 - rate) / (1 - disappearRate);\n  return `rgba(${r},${g},${b},${opacity})`;\n};\n\ntype WavesState = { line: number; params: WaveParams[]; fill: string };\n\nconst initialWavesState = (endLine: number): WavesState[] => {\n  return [...Array(waveCount)].map((_, i) => {\n    const line = (endLine * i) / waveCount;\n    const fill = calcFill(line, endLine);\n    return { line, params: generateWaveParams(), fill };\n  });\n};\n\nfunction App() {\n  const { width, height } = useWindowSize();\n  const endLine = height * 0.8;\n  const [times, setTimes] = useState<[number, number]>([performance.now(), performance.now()]);\n  const [wavesState, setWavesState] = useState<WavesState[]>(initialWavesState(endLine));\n\n  useEffect(() => {\n    setInterval(() => setTimes((state) => [performance.now(), state[0]]), 50);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const elapsed = times[0] - times[1];\n    setWavesState((state) => {\n      let needSwap = false;\n      const waves = state.map((w) => {\n        const line = (w.line + elapsed / 25) % endLine;\n        if (line < w.line) needSwap = true;\n        const params = line < w.line ? generateWaveParams() : w.params;\n        const fill = calcFill(line, endLine);\n        return { line, params, fill };\n      });\n      if (!needSwap) return waves;\n      return [waves[waves.length - 1], ...waves.slice(0, waves.length - 1)];\n    });\n  }, [times, endLine]);\n\n  const wavePoints: number[][] = wavesState.map(({ line, params }) => calcPoints(width, line, endLine, params));\n\n  const props: WaveProps[] = wavesState\n    .map(({ fill }, i) => ({\n      width,\n      height,\n      points: wavePoints[i],\n      tailPoints: i === 0 ? bottomPoints(width) : wavePoints[i - 1],\n      fill,\n    }))\n    .reverse();\n\n  return (\n    <Stage width={width} height={height}>\n      <Layer>\n        <Rect width={width} height={height} fill=\"#ddc\" />\n        {props.map((p, i) => (\n          <Wave key={i} {...p} />\n        ))}\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}