{"version":3,"sources":["hooks.ts","Sparkle.tsx","Wave.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Sparkle","props","fill","Wave","width","height","points","tailPoints","x","y","sceneFunc","context","shape","beginPath","moveTo","forEach","lineTo","reverse","fillStrokeShape","whiteRate","disappearRate","lifespan","randomRange","range","Math","random","randomInt","int","floor","waveRandomParams","am","tp","PI","generateWaveParams","bottomPoints","Array","map","calcColor","a","b","rate","ceil","calcRGB","wave1","wave2","wave3","wave4","calcFill","line","endLine","r","g","o","generatorSparkleState","beforeLife","weights","length","Error","wIndex","rand","indexOf","randomIntWeighted","yDelta","sides","life","radius","App","useState","window","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","performance","now","times","setTimes","_","i","opacity","params","initialWavesState","wavesState","setWavesState","initialSparklesState","sparklesState","setSparklesState","setInterval","state","elapsed","needSwap","waves","w","slice","s","wavePoints","slowDownLine","maxRemain","remain","deg","speed","sin","reduce","cos","calcPoints","waveProps","sparkleProps","other","wave","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73264e5b.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const useRefCallback = <T>() => {\n  const ref = useRef<T | null>(null);\n  const setRef = useCallback((node: T) => {\n    ref.current = node;\n  }, []);\n\n  return {\n    ref,\n    setRef,\n  };\n};\n","import React from \"react\";\nimport { RegularPolygon } from \"react-konva\";\n\nexport type WaveParams = [number, number, number, number];\n\nexport type SparkleProps = {\n  x: number;\n  y: number;\n  sides: number;\n  radius: number;\n  opacity: number;\n};\n\nfunction Sparkle(props: SparkleProps) {\n  return <RegularPolygon {...props} fill=\"#fff\" />;\n}\n\nexport default Sparkle;\n","import React from \"react\";\nimport { Shape } from \"react-konva\";\n\nexport type WaveParams = [number, number, number, number];\n\nexport type WaveProps = {\n  width: number;\n  height: number;\n  points: number[];\n  tailPoints: number[];\n  fill: string;\n};\n\nfunction Wave({ width, height, points, tailPoints, fill }: WaveProps) {\n  return (\n    <Shape\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={fill}\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(0, tailPoints[0]);\n        tailPoints.forEach((y, x) => context.lineTo(x, y));\n        points.reverse().forEach((y, x) => context.lineTo(width - x, y));\n        context.fillStrokeShape(shape);\n      }}\n    />\n  );\n}\n\nexport default Wave;\n","import React, { useEffect, useState } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { useWindowSize } from \"./hooks\";\nimport Sparkle, { SparkleProps } from \"./Sparkle\";\nimport Wave, { WaveParams, WaveProps } from \"./Wave\";\n\nconst waveCount = 6;\nconst whiteRate = 0.7;\nconst disappearRate = 0.76;\nconst slowDownRate = 0.6;\n\nconst sparkleCount = 100;\nconst lifespan = 1000;\n\nconst randomRange = (range: number): number => -range + 2 * range * Math.random();\nconst randomInt = (int: number): number => Math.floor(int * Math.random());\nconst randomIntWeighted = (weights: number[]): number => {\n  const rand = Math.random();\n  return weights.map((r) => rand < r).indexOf(true);\n};\n\nconst waveRandomParams = (am: number, tp: number): WaveParams => {\n  return [am + randomRange(am / 4), tp + randomRange(tp / 4), randomRange(Math.PI), randomRange(0.0005)];\n};\n\nconst generateWaveParams = (): WaveParams[] => {\n  return [\n    waveRandomParams(25, 610),\n    waveRandomParams(20, 470),\n    waveRandomParams(10, 230),\n    waveRandomParams(0.5, 29),\n    waveRandomParams(0.5, 23),\n    waveRandomParams(0.5, 19),\n  ];\n};\n\nconst calcPoints = (width: number, line: number, endLine: number, params: WaveParams[]): number[] => {\n  const slowDownLine = endLine * slowDownRate;\n  const maxRemain = endLine - slowDownLine;\n  const remain = line - slowDownLine;\n  return [...Array(width + 1)].map((_, x) => {\n    const y = params\n      .map(([am, tp, deg, speed]) => am * Math.sin((Math.PI / tp) * (deg + x) + line * am * speed))\n      .reduce((a, b) => a + b);\n    if (remain < 0) return y + line - 50;\n    return y + slowDownLine + remain * Math.cos((Math.PI * remain * 0.45) / maxRemain) - 50;\n  });\n};\n\nconst bottomPoints = (width: number): number[] => [...Array(width + 1)].map(() => 0);\n\nconst calcColor = (a: number, b: number, rate: number): number => {\n  return Math.ceil(a + (b - a) * rate);\n};\n\nconst calcRGB = (a: RGB, b: RGB, rate: number): RGB => {\n  return [calcColor(a[0], b[0], rate), calcColor(a[1], b[1], rate), calcColor(a[2], b[2], rate)];\n};\n\ntype RGB = [number, number, number];\nconst wave1: RGB = [0, 96, 161];\nconst wave2: RGB = [102, 244, 255];\nconst wave3: RGB = [200, 250, 255];\nconst wave4: RGB = [132, 132, 132];\n\nconst calcFill = (line: number, endLine: number): [string, number] => {\n  const rate = line / endLine;\n  if (rate < whiteRate) {\n    const [r, g, b] = calcRGB(wave1, wave2, rate / whiteRate);\n    return [`rgba(${r},${g},${b},1)`, 1];\n  }\n\n  if (rate < disappearRate) {\n    const [r, g, b] = calcRGB(wave2, wave3, (rate - whiteRate) / (disappearRate - whiteRate));\n    return [`rgba(${r},${g},${b},1)`, 1];\n  }\n  const [r, g, b] = calcRGB(wave3, wave4, (rate - disappearRate) / (1 - disappearRate));\n  const o = (1 - rate) / (1 - disappearRate);\n  return [`rgba(${r},${g},${b},${o})`, o];\n};\n\ntype WaveState = { line: number; params: WaveParams[]; fill: string; opacity: number };\ntype SparkleState = { wIndex: number; x: number; yDelta: number; sides: number; life: number; radius: number };\n\nconst initialWavesState = (endLine: number): WaveState[] => {\n  return [...Array(waveCount)].map((_, i) => {\n    const line = (endLine * i) / waveCount;\n    const [fill, opacity] = calcFill(line, endLine);\n    return { line, params: generateWaveParams(), fill, opacity };\n  });\n};\n\nconst generatorSparkleState = (width: number, beforeLife?: number): SparkleState => {\n  const weights = [0.3, 0.7, 0.9, 0.96, 0.98, 1];\n  if (weights.length !== waveCount) throw new Error();\n  const wIndex = randomIntWeighted(weights);\n  const x = randomInt(width + 1);\n  const yDelta = 10 - wIndex * 2 + randomRange(20);\n  const sides = 5 + randomInt(3);\n  const life = beforeLife ?? randomInt(lifespan);\n  const radius = 2 + randomInt(8);\n  return { wIndex, x, yDelta, sides, life, radius };\n};\n\nconst initialSparklesState = (width: number): SparkleState[] => {\n  return [...Array(sparkleCount)].map(() => generatorSparkleState(width));\n};\n\nfunction App() {\n  const { width, height } = useWindowSize();\n  const endLine = height * 0.8;\n  const [times, setTimes] = useState<[number, number]>([performance.now(), performance.now()]);\n  const [wavesState, setWavesState] = useState<WaveState[]>(initialWavesState(endLine));\n  const [sparklesState, setSparklesState] = useState<SparkleState[]>(initialSparklesState(width));\n\n  useEffect(() => {\n    setInterval(() => setTimes((state) => [performance.now(), state[0]]), 50);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const elapsed = times[0] - times[1];\n    setWavesState((state) => {\n      let needSwap = false;\n      const waves = state.map((w) => {\n        const line = (w.line + elapsed / 25) % endLine;\n        if (line < w.line) needSwap = true;\n        const params = line < w.line ? generateWaveParams() : w.params;\n        const [fill, opacity] = calcFill(line, endLine);\n        return { line, params, fill, opacity };\n      });\n      if (!needSwap) return waves;\n      return [waves[waves.length - 1], ...waves.slice(0, waves.length - 1)];\n    });\n    setSparklesState((state) =>\n      state.map((s) => {\n        const life = s.life - elapsed;\n        if (life < 0) return generatorSparkleState(width, lifespan - life);\n        return { ...s, life };\n      })\n    );\n  }, [times, endLine, width]);\n\n  const wavePoints: number[][] = wavesState.map(({ line, params }) => calcPoints(width, line, endLine, params));\n\n  const waveProps: (WaveProps & { opacity: number })[] = wavesState\n    .map(({ fill, opacity }, i) => ({\n      width,\n      height,\n      points: wavePoints[i],\n      tailPoints: i === 0 ? bottomPoints(width) : wavePoints[i - 1],\n      fill,\n      opacity,\n    }))\n    .reverse();\n\n  const sparkleProps: SparkleProps[] = sparklesState.map((s) => {\n    const { wIndex, yDelta, life, ...other } = s;\n    const wave = waveProps[s.wIndex];\n    const y = wave.points[s.x] - yDelta;\n    const opacity = (wave.opacity * life) / lifespan;\n    const radius = (1 - opacity) * s.radius;\n    return { ...other, y, opacity, radius };\n  });\n\n  return (\n    <Stage width={width} height={height}>\n      <Layer>\n        <Rect width={width} height={height} fill=\"#ddc\" />\n        {waveProps.map((p, i) => (\n          <Wave key={i} {...p} />\n        ))}\n        {sparkleProps.map((s, i) => (\n          <Sparkle key={i} {...s} />\n        ))}\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}